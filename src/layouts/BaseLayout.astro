---
import "../styles/global.css"; // ensure Tailwind + overrides load everywhere

const {
  title = "Nico Abramowski — Data (Warehousing) Portfolio",
  description = "Portfolio & project demos.",
} = Astro.props;

const base = import.meta.env.BASE_URL;
const path = Astro.url.pathname;
const isActive = (href) => path === href || (path.startsWith(href) && href !== base);
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title}</title>

    <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  </head>
  <body class="min-h-screen antialiased">
    <div class="grid grid-cols-1 lg:grid-cols-[260px_1fr] min-h-screen">
      <!-- Sidebar -->
      <aside class="border-b lg:border-b-0 lg:border-r border-gray-200/70 dark:border-white/10 bg-white dark:bg-neutral-900 sticky top-0 z-30">
        <div class="p-4">
          <a href={base} class="flex items-center gap-3">
            <img src={`${base}favicon.svg`} alt="logo" class="w-8 h-8" />
            <div>
              <div class="font-bold">Nico Abramowski</div>
              <div class="text-xs text-gray-500">Data / Warehousing</div>
            </div>
          </a>
        </div>
        <nav class="px-2 pb-4 space-y-1 text-sm">
          <a class={`navlink ${isActive(`${base}about`) ? 'navlink-active' : ''}`} href={`${base}about`}>About</a>
          <div class="px-3 pt-3 text-xs uppercase tracking-wider text-gray-500">Projects (8-week plan)</div>
          <a class={`navlink ${isActive(`${base}projects/mini-warehouse`) ? 'navlink-active' : ''}`} href={`${base}projects/mini-warehouse`}>Mini Data Warehouse</a>
          <a class={`navlink ${isActive(`${base}projects/data-quality-lineage`) ? 'navlink-active' : ''}`} href={`${base}projects/data-quality-lineage`}>Data Quality &amp; Lineage</a>
          <a class={`navlink ${isActive(`${base}projects/cdc-warehouse`) ? 'navlink-active' : ''}`} href={`${base}projects/cdc-warehouse`}>CDC → Warehouse</a>
          <a class={`navlink ${isActive(`${base}projects/performance-governance`) ? 'navlink-active' : ''}`} href={`${base}projects/performance-governance`}>Performance &amp; Governance</a>
          <div class="px-3 pt-3 text-xs uppercase tracking-wider text-gray-500">More</div>
          <a class="navlink" href="https://github.com/Nico-Ab" target="_blank" rel="noreferrer">GitHub</a>
          <a class="navlink" href={`${import.meta.env.BASE_URL}CV.pdf`} download>CV (PDF)</a>
        </nav>
        <div class="px-4 pb-4 flex items-center justify-between text-sm">
          <button id="themeToggle" class="button" aria-label="Toggle theme">Toggle theme</button>
          <a class="text-gray-500 hover:underline" href={base}>Home</a>
        </div>
      </aside>

      <!-- Main (pattern above background, below content) -->
      <main class="relative bg-white dark:bg-neutral-950">
        <!-- Background layers -->
        <div class="absolute inset-0 z-0 pointer-events-none">
          <div class="bg-grid absolute inset-0"></div>
          <div class="bg-accents absolute inset-0"></div>
        </div>

        <!-- Content -->
        <div class="container-xl py-10 relative z-10">
          <slot />
        </div>
      </main>
    </div>

    <!-- Theme toggle + scroll reveal -->
    <script>
      (function () {
        const html = document.documentElement;
        try {
          const saved = localStorage.getItem('theme');
          if (saved === 'dark' || (!saved && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            html.classList.add('dark');
          } else {
            html.classList.remove('dark');
          }
          const btn = document.getElementById('themeToggle');
          if (btn) {
            btn.addEventListener('click', () => {
              html.classList.toggle('dark');
              localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
            });
          }
        } catch (e) {}

        const els = document.querySelectorAll('.reveal');
        const obs = new IntersectionObserver((entries) => {
          entries.forEach(e => {
            if (e.isIntersecting) {
              e.target.classList.add('visible');
              obs.unobserve(e.target);
            }
          });
        }, { threshold: 0.15 });
        els.forEach(el => obs.observe(el));
      })();
    </script>
  </body>
</html>
